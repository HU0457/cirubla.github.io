(function(){
  var comments = atob('H4sICCTRPGQAAzgwMzgzOTU4Mzc4MTY2MjMyODIuanNvbgDtnP9TE9cWwP8VJjDO65TN3nv3e+bxfKhoeTO+qXxp6audN5vNkqQm2czuRsCOM9iqQEGrbX1YpF+0WGt9Yq0UESj8LzWbhJ/6L7xzN4EE2JDwxbr6woQM2XvvuWfvPed8ztnN8lHgrG5acSMVCAVwEAVaA3pKMyLxVBQO9PYcZ2Q41K/rkUDoo8BgMpGy4HjMttMhlh0YGAgOcEHDjLIEIYFtt40k9HZ7tRhpPdWtq6YWKw9QlaBmJFmGtdK6xtIeltuDxUHMboyMRsojLC2mJ1UrGDWMaEJ3Rxcng97RSItuq1TPd9nTgaMdJ090v2Wc0+NpqTPZrvQNHldPdPQGTwega9xVv8WGvjAiFE4Y0ahuUnGtWFEU9wAjEE4QFIQFHhOBEJFISjBtWLaMOJlTBJmTZCyKhCMyCdKhST1lW4HzrYFMOqLaenkKggjHII4hUg9GIYRCRAnyMnkTyfCBDrDjdkLf6H60JKrJSDXll/+T/3F8beqz3CdP8lMXnStTzuydUFNu7EH+1i+/D0/nZ1ayy1PO07vQy3n4w+/DX7+PP/hjeSr35ZIzspQbG889uZF9Nv58+Fp29XbuwqPcl/Nrty4/H75Op03EU2cCofc/Cph6oo4lbna3HbQdSoOyATWdTsQ11QZbYVXY6Tdht6A1Zur9JWEWSEubRtRUk4wdg8mCdF2ttGG7Uqk4i11fODai96uZhA2KrStk6Yn+3c5HbbBiO0uTeGwl67GN25Q5rCbstg8tI3UonQkn4lZMjzBJdbCtYkeREMI4JAhBSRL+dQgaGVO3YKjVJiB0yNSpO+lttpnRDxlmRDfDQ20bsg6dbSMV5wuT6WYKTKd80rY+aLMxe5crC7ulsOCAlqHF1QSjp6LxlK6b4MQMZqKqHdNNJp7qN8yku5xBd4KyHrFMePN0dLZM2MqEoSWcCQdhKzbmCpz/oDWgZuyYYbq2lFKTZVOuNF/XM8z4RltF0KjcMDit/nhCZzGWeMwJIi8qsEOwayLBVATYZjyxISRlmHo6MfT3Cgm0E4SCeFKNuorUadx2LJMMp6js1sBAPGLTMEVEug56PBqjc3EEPlmmBn+yLB8MpzcvOnOipzNG0pFzx97rZN+xNfOIaPahdCfbXvo50htlz74bOTbY0cv/U9RYixDE9tDdA8U/TEcD5+lSRvWUboJ9m1T3ciyWgogGY3cBqywdNLtrcqR4iK5DOei22IatJrqKphkIYbSp0bJV0+5MRfTBjZXFW8bHbT1pva2bb7vLSseDo5hD7p5vjrzHOk6ePNXHS/rRYuR9d/Af3cfPGAcQeRkFSUQiMi/KBPOKjASJ+k9gw6EqQi5SGCQwCEIuH3IDLSwgKofc7TG6xgCw+RY9ErcryNcCx6rRT2JpY2udwjcDoDB7Pzd6HVym8OvT7OLl/MRVZ2buj+UJ4y+/j97/N/y+YQSDQTpOM1I2bAMdWQoYpVixSzlbSEDP8+UGXtZjpw9vjpYvnw51KPlSQ/phK2YMlLKJNkx4LEoiL4PhoWbNy5M27DCwY1BvTxmpoaSRsbwiutcqb4R0EbhJRBkLBFaV5zjE/ekhHW8K6e6nYkhfVz6ejGJXe/rrSoMjbBiLjGlkIEJGgtF4/2FNhVnbwqqC1QivaxwncGENa4TnZCGiSaoqSv1qfzGi2zGzJZ5i3LNibKMcPqChErBmwg0e1lAqsm7J0ENXI2wxEX/B/G8NFOXvISx7OAtdVyNjanp10ld3Piq07GXe0rd5U9FG4KNOd+ltE9hl2kMV5htYn5yi7GhCtSwQc1ZNZGhbOh5hMCIKQZwoiK4HbxkViVvphDrUE0/qFePoUjvP5oTc9KiUm7zbtB7fwYOojK1k7Dj6gsgocRx4F3UsWQRHF3m+LjJC6ro7MnoMODgyegjfTMbc3eXswqe0ELo2AeUOsAzo5qxMFm7N5p4+di7dpU03bzWF3jidyq4uFu6NQSP0cu7+Bi1FADorw/DK3Xy0pXaCDoXhC1AyPR/+uDZb69fkr2Gzif3bfrXxH6E9LM5/hK6tpO8ILYpFQnt5dJ2ErlV27QhpP9dd68q/gOqrhHRO1HhNU4nCqzoU8EToxxrmFBWsT4r0C5EG0l8tpAvUhOF9f0h3weSN9DPt7VuQ3tXRwR8E0kUkS5wIHSUwQxmJsoB2RjrGPVgKcUrdSK864CCQXlX4FqRf/JaC8fOJtcm5ws9XsgvDue+e1sHfasP8B0qPffQfKGsr6StQQprOS3wRlF5+spdS9lUoQxMqrGa5AOUlhRNFhehcRMVQt+gy0hQMliDoKhEatHrFaMUJkoAlJHF7ghXGLq1KMdeTVkdR+4nttIoeSAEq85AiybIscBx4p8DxNWFFSAheu4CV94ADgpW38Fr15+mUc2nemf3GWRl1ZqacG5ezC1NFJBVGfiosPnB+fryluFt7cLNY1jnTPz4f/jT338W1nyZpuTe2mJt+9Hx4fG1kYu3rO7npsezCSmF1JP94Kbu8DB2yK1AYXttjdVqsQl+Orv5D8nZj9R+Ra+roMyBD5CKlynV7KGgUro3CtZEK/HmFazEXWEeady7Q23vyVIofKucCQm8HOnMQuYDA85zIg/a8QHhexhKumgxgxNCX3IO4EMEhwgWRsmMyUGPA/pKBGsI3JwNrt+ddzi79sXyhNpK39vYfFD12zX9UrK2kn7AIhSkP58GBFTVrXl7RqFMbdeqrB6c91akYAZswonCSKZyKIbb6ndKOrpR2TusuwSnW1XeiFx0EnDjwPZlInAgnAGZJeEWpCifMYMIQsQcU5cQQLwUVWdkRTjsP2Cecdha+GU756XFndiL7bNy5djU3er147zG7cLV8ufTH28WLpsAjKGJHLudvz9LK7tGc8/mE8+xJbnI+N/2t89mDtaXrzuwdeoNz9GZ2cax0/OfH9AWtrjwo9EDGtQkQBxVk8RgdMT1Ga8GFxdzD77PPxur60tKuFC9VtftWviSn1gnAKHivPL728U+5C/P5iVkon+F4fukL5/Gwc2UOhDgz953vZ+iJjD7wbSHs4Qz+Y35tJX3EfKoeEkUkgXM2a17BpsH8BvP/X5iPKfMJMJ+IbkHqkqs689/q7pPPbRSksSPdB/PEBiPKoiSIWMEYCwKcA3LLam/mcwxap6yAQpwcxPLOBenOA/bJ/J2Fb2G+e/XMuXQRSLQ2PFVYHQFQZhdv5RdX83N38hfnAanO1SXnwkjukyfZxfH82H2gWO7GXPa3L4BcuW8uFla/AgLSg588yT25kZ+d3P7NJOfa5OE6MP6n6uI/sHpYnP/AWltJP4FVxLIsipwMHtCseXl0JVg3zgDeXYf16ffQGglAIwF4nRMADhKATfwXUPUL0p3Hu7gzst5dwf/eA+E/HMeEUwgvyHSF4I9a/Jd7EArxQgiLQUnCdfC/2oAD4X814VueG1r9ypm5l/vh4yIrPR8PzS48pJVrxcOgdTxHtGe5/uOyhyX4j8u1lfQXlxUZFBbBMps1L097zbjcuEnduEndSAn2fpO6nBMU7wO4ZKuWE3S8d+xUnyb3l64J9HUp4eNnBg7kWWKe5zkF0y+oEEXAPKp+G0BikOhCWAnBi0NBReJ3TAl2HrDPlGBn4ZtTgjq+KvZwpvDoYmF20Xn6S+HOg+xv04XhS87od2tfzfj2qvX2rfMfw2vq6COE84osYgLJPVhSs+bhGC/8yWAiiRzPIUHAGOZWZCjqX5Wqt/Fk8OsDulKo7NKTxlk3N12nFv3/LV6Mq0ZGRYQfyIGEXYFRAjCKZTC68b0qGDuPnXpLG9r490ZHlHc6Og4EjBiCgSQigiTIVen/CxCrkpEgBkkMUXqwGOKBRTioKGQnMtYYsD8y1hC+5WL5ylVn7F5h/tP8+OO1kQn3du5S4d7nTdu/BU0vNM/cz41dqeOy9x6l+o+xHlbgP8jWVtJHlBUUEcH5SeCCpFnz8rLXrFBuXMBuQNxH1eqeLmAT+q01iTJZcZ+ucslSZPIH58//D/RvW5suUQAA');

  var input = new Uint8Array(comments.length);
  for (var i = 0; i < comments.length; i++) { input[i] = comments.charCodeAt(i);}
  var output = pako.inflate(input,{ to: 'string' });
  window.g_commentLoader.onLoad(JSON.parse(output));
})();