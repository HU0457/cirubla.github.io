(function(){
  var comments = atob('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');

  var input = new Uint8Array(comments.length);
  for (var i = 0; i < comments.length; i++) { input[i] = comments.charCodeAt(i);}
  var output = pako.inflate(input,{ to: 'string' });
  window.g_commentLoader.onLoad(JSON.parse(output));
})();